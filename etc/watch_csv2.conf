condor_q -allusers -total;

select
    group_name,
    user,
    target_alias,
    image,
    instance_type,
    request_cpus,
    max(request_disk div (1024*1024)) as request_disk,
    max(request_ram) as request_ram,
    sum(idle) as idle,
    sum(running) as running,
    sum(completed) as completed,
    sum(held) as held,
    sum(other) as other
from (
    select
        group_name,
        user,
        target_alias,
        image,
        instance_type,
        request_cpus,
        request_disk div (1024*1024) as request_disk,
        request_ram,
        case when job_status=1 then 1 else 0 end as idle,
        case when job_status=2 then 1 else 0 end as running,
        case when job_status=4 then 1 else 0 end as completed,
        case when job_status=5 then 1 else 0 end as held,
        case when job_status!=1 and job_status!=2 and job_status!=4 and job_status!=5 then 1 else 0 end as other
    from condor_jobs
    ) as cj
group by
    group_name,
    user,
    target_alias,
    image,
    instance_type,
    request_cpus
order by
    group_name,
    user,
    target_alias,
    image,
    instance_type,
    request_cpus,
    request_disk,
    request_ram
;

select
    group_name,
    target_alias,
    job_per_core,
    request_cpus_max as cpus_max,
    request_cpus_total as cpus_total,
    request_disk_max as disk_max,
    request_disk_total as disk_total,
    request_ram_max as ram_max,
    request_ram_total as ram_total,
    idle,
    running,
    completed,
    held,
    other,
    flavors
from view_groups_of_idle_jobs
order by
    group_name
;

select
    *
from view_active_resource_shortfall
;

select
    group_name,
    cloud_name,
    concat(max(cores_used), '/', max(cores_limit), '(', max(cores_foreign), ')') as `cores (usd/max(fgn))`,
    concat(max(ram_used), '/', max(ram_limit), '(', max(ram_foreign), ')') as `ram (usd/max(fgn))`,
    sum(flavor_VMs) as VMs,
    sum(flavor_starting) as `starting`,
    sum(flavor_unregistered) as `unregistered`,
    sum(flavor_idle) as `idle`,
    sum(flavor_running) as `running`,
    sum(flavor_retiring) as `retiring`,
    sum(flavor_error) as `error`,
    sum(flavor_manual) as `manual`,
    group_concat(distinct updater order by updater) as updater,
    group_concat(flavor_slots order by flavor_slots) as flavor_slots
from view_available_resources
group by
    group_name,
    cloud_name
order by
    group_name,
    cloud_name
;

select
    authurl,
    config_value as NewVmsThrottle,
    `starting`+unregistered as NewVMs
from view_resource_contention
join csv2_configuration on
    category='csmain' and
    config_key='new_VMs_throttle'
;

#elect
    machine,
    min(total_disk div (1024*1024)) as total_disk,
    sum(case when slot_type="Partitionable" then 1 else 0 end) as primary_slots,
    sum(case when slot_type="Dynamic" then 1 else 0 end) as dynamic_slots
from condor_machines
group by
    machine
order by
    machine
;

select
    *
from view_idle_vms
;

select
    cv.group_name,
    cv.cloud_name,
    cf.name as flavor,
    hostname,
    htcondor_partitionable_slots as primary_slots,
    htcondor_dynamic_slots as dynamic_slots,
    from_unixtime(htcondor_slots_timestamp) as slots_timestamp,
    retire,
    terminate,
    from_unixtime(cv.last_updated) as last_updated,
    updater,
    from_unixtime(htcondor_startd_time) as htcondor_startd_time,
    htcondor_startd_errors
from csv2_vms as cv
left outer join cloud_flavors as cf on
    cv.group_name=cf.group_name and
    cv.cloud_name=cf.cloud_name and
    cv.flavor_id=cf.id
where
    htcondor_dynamic_slots is null or
    htcondor_dynamic_slots<1 or 
    terminate>0
order by
     group_name,
     cloud_name,
     flavor,
     hostname
;
