#!/usr/bin/env python3
"""
This is the command line interface to cloudscheduler version 2.
"""

from pathlib import Path
from csv2_common import requests

import os
import sys

import yaml
import json

import csv2_cloud
import csv2_defaults
import csv2_group
import csv2_help
import csv2_helpers
import csv2_metadata
import csv2_my
import csv2_job
import csv2_server
import csv2_user
import csv2_vm

DEFAULT_SETTINGS = {
    'server-address': 'https://localhost',
    }

def main(args):
    """
    Determine object type and call handler.
    """

#       'ca_cert': '%s/lets-encrypt-x3-cross-signed.pem.txt' % os.path.dirname(os.path.abspath(args[0])),

    # Initialize global variables.
    gvar = {
        'action': None,
        'actions': {
            'cloud': [
                False, # super_user?
                {
                    'add':                                csv2_cloud.add,
                    'delete':                             csv2_cloud.delete,
                    'list':                               csv2_cloud.list,
                    'status':                             csv2_cloud.status,
                    'update':                             csv2_cloud.update,
                    'metadata-collation':                 csv2_cloud.metadata_collation,
                    'metadata-delete':                    csv2_cloud.metadata_delete,
                    'metadata-edit':                      csv2_cloud.metadata_edit,
                    'metadata-list':                      csv2_cloud.metadata_list,
                    'metadata-load':                      csv2_cloud.metadata_load,
                    'metadata-update':                    csv2_cloud.metadata_update,
                    }
                ],
            'defaults': [
                False, # super_user?
                {
                    'delete':                             csv2_defaults.delete,
                    'list':                               csv2_defaults.list,
                    'set':                                csv2_defaults.set,
                    }
                ],
            'group': [
                True, # super_user?
                {
                    'add':                                csv2_group.add,
                    'defaults':                           csv2_group.defaults,
                    'delete':                             csv2_group.delete,
                    'list':                               csv2_group.list,
                    'update':                             csv2_group.update,
                    'metadata-delete':                    csv2_group.metadata_delete,
                    'metadata-edit':                      csv2_group.metadata_edit,
                    'metadata-list':                      csv2_group.metadata_list,
                    'metadata-load':                      csv2_group.metadata_load,
                    'metadata-update':                    csv2_group.metadata_update,
                    }
                ],
            'helpers': [
                False, # super_user?
                {
                    'generate_bash_completion_script':    csv2_helpers.generate_bash_completion_script,
                    }
                ],
            'job': [
                False, # super_user?
                {
                    'list':                               csv2_job.list,
                    }
                ],
            'metadata': [
                False, # super_user?
                {
                    'backup':                             csv2_metadata.backup,
                    'delete':                             csv2_metadata.delete,
                    'edit':                               csv2_metadata.edit,
                    'group-defaults':                     csv2_metadata.group,
                    'list':                               csv2_metadata.list,
                    'load':                               csv2_metadata.load,
                    'restore':                            csv2_metadata.restore,
                    'update':                             csv2_metadata.update,
                    }
                ],
            'my': [
                False, # super_user?
                {
                    'settings':                           csv2_my.settings,
                    }
                ],
            'server': [
                True, # super_user?
                {
                    'config':                             csv2_server.config,
                }
            ],
            'user': [
                True, # super_user?
                {
                    'add':                                csv2_user.add,
                    'delete':                             csv2_user.delete,
                    'list':                               csv2_user.list,
                    'update':                             csv2_user.update,
                    }
                ],
            'vm': [
                False, # super_user?
                {
                    'list':                               csv2_vm.list,
                    'update':                             csv2_vm.update,
                    }
                ]
            },
        'command_keys': (
            # short_name, long_name, key_value(T)/boolean(F)
            ('-bk',  '--backup-key', True),
            ('-br',  '--backup-repository', True),
            ('-c',   '--cacerts', True),
            ('-ca',  '--cloud-address', True),
            ('-cc',  '--config-category', True),
            ('-ce',  '--cloud-enabled', True),
            ('-cn',  '--cloud-name', True),
            ('-cpw', '--cloud-password', True),
            ('-cP',  '--cloud-project-domain', True),
            ('-cp',  '--cloud-project', True),
            ('-cr',  '--cloud-region', True),
            ('-csp', '--cloud-spot-price', True),
            ('-ct',  '--cloud-type', True),
            ('-cU',  '--cloud-user-domain', True),
            ('-cu',  '--cloud-user', True),
            ('-dci', '--delete_cycle_interval', True),
            ('-djg', '--default_job_group', True),
            ('-eg',  '--enable_glint', True),
            ('-f',   '--file-path', True),
            ('-g',   '--group', True),
            ('-gm',  '--group-manager', True),
            ('-gme', '--group-metadata-exclusion', True),
            ('-gmo', '--group-metadata-option', True),
            ('-gn',  '--group-name', True),
            ('-go',  '--group-option', True),
            ('-H',   '--long-help', False),
            ('-h',   '--help', False),
            ('-jc',  '--job-cores', True),
            ('-jd',  '--job-disk', True),
            ('-jh',  '--job-hold', True),
            ('-jI',  '--job-id', True),
            ('-ji',  '--job-image', True),
            ('-jp',  '--job-priority', True),
            ('-jR',  '--job-requirements', True),
            ('-jr',  '--job-ram', True),
            ('-jrc', '--job-request-cpus', True),
            ('-jrd', '--job-request-disk', True),
            ('-jrr', '--job-request-ram', True),
            ('-jrs', '--job-request-swap', True),
            ('-jS',  '--job-status', True),
            ('-js',  '--job-swap', True),
            ('-jtc', '--job-target-clouds', True),
            ('-ju',  '--job-user', True),
            ('-lf',  '--log_file', True),
            ('-ll',  '--log_level', True),
            ('-me',  '--metadata-enabled', True),
            ('-mmt', '--metadata-mime-type', True),
            ('-mn',  '--metadata-name', True),
            ('-mp',  '--metadata-priority', True),
            ('-nld', '--no_limit_default', True),
            ('-NV',  '--no-view', False),
            ('-ok',  '--only-keys', False),
            ('-r',   '--rotate', False),
            ('-s',   '--server', True),
            ('-sa',  '--server-address', True),
            ('-sC',  '--server-grid-cert', True),
            ('-sic', '--sleep_interval_cleanup', True),
            ('-siC', '--sleep_interval_command', True),
            ('-sif', '--sleep_interval_flavor', True),
            ('-sii', '--sleep_interval_image', True),
            ('-sij', '--sleep_interval_job', True),
            ('-sik', '--sleep_interval_keypair', True),
            ('-sil', '--sleep_interval_limit', True),
            ('-sim', '--sleep_interval_machine', True),
            ('-sin', '--sleep_interval_network', True),
            ('-siv', '--sleep_interval_vm', True),
            ('-sK',  '--server-grid-key', True),
            ('-sml', '--sleep-interval-main-long', True),
            ('-sms', '--sleep-interval-main-short', True),
            ('-spw', '--server-password', True),
            ('-SU',  '--super-user', True),
            ('-su',  '--server-user', True),
            ('-te',  '--text-editor', True),
            ('-ucn', '--user-common-name', True),
            ('-un',  '--username', True),
            ('-uo',  '--user-option', True),
            ('-upw', '--user-password', True),
            ('-V',   '--view', True),
            ('-VC',  '--view-columns', False),
            ('-vc',  '--vm-cores', True),
            ('-vd',  '--vm-disk', True),
            ('-vF',  '--vm-foreign', True),
            ('-vf',  '--vm-flavor', True),
            ('-vi',  '--vm-image', True),
            ('-vh',  '--vm-hostname', True),
            ('-vk',  '--vm-keyname', True),
            ('-vka', '--vm-keep-alive', True),
            ('-vn',  '--vm-network', True),
            ('-vo',  '--vm-option', True),
            ('-vr',  '--vm-ram', True),
            ('-vS',  '--vm-status', True),
            ('-vs',  '--vm-swap', True),
            ('-xA',  '--expose-API', False),
            ('-Y',   '--yes', False),
            ),
        'command_name': os.path.basename(args[0]),
        'cookies': dict(),
        'csrf': None,
        'function_args': None,
        'home_dir': str(Path.home()),
        'object': None,
        'tables_shown': 0,
        'retrieve_options': False,
        }
    
    # Retrieve arguments.
    gvar['command_args'] = _args(gvar, args[1:])

    # Ensure a minimal user settings exists.
    if not os.path.exists('%s/.csv2/default' % gvar['home_dir']):
        os.makedirs('%s/.csv2/default' % gvar['home_dir'], mode=0o700)  

    if not os.path.exists('%s/.csv2/default/settings.yaml' % gvar['home_dir']):
        _fd = open('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 'w')
        _fd.write(yaml.dump(DEFAULT_SETTINGS))
        _fd.close()
        os.chmod('%s/.csv2/default/settings.yaml' % gvar['home_dir'], 0o600)

    # Load the user settings.
    if 'server' in gvar['command_args']:
        gvar['server'] = gvar['command_args']['server']
        _fd = open('/tmp/.csv2', 'w')
        _fd.write(gvar['server'])
        _fd.close()
    else:
        if os.path.isfile('/tmp/.csv2'):
            _fd = open('/tmp/.csv2')
            gvar['server'] = _fd.read()
            _fd.close()
        else:
            gvar['server'] = 'default'

    try:
        _fd = open('%s/.csv2/%s/settings.yaml' % (gvar['home_dir'], gvar['server']))
        gvar['user_settings'] = yaml.load(_fd)
        _fd.close()
    except:
        gvar['user_settings'] = {}

    # Apply options temporarily.
    for key in gvar['command_args']:
        if isinstance(gvar['command_args'][key], bool):
            if key not in gvar['user_settings']:
                gvar['user_settings'][key] = False
            
            if gvar['command_args'][key]:
                gvar['user_settings'][key] = not gvar['user_settings'][key]
        else:
            if gvar['command_args'][key] == '-':
                if key in gvar['user_settings']:
                    del(gvar['user_settings'][key])
            else:
                gvar['user_settings'][key] = gvar['command_args'][key]

    # Set active_group and super_user.
    if gvar['object'] == 'defaults' or gvar['object'] == 'helpers' or gvar['object'] == 'metadata':
        gvar['active_group'] = '-'
        gvar['super_user'] = False
        gvar['user_groups'] = []
    else:
        response = requests(gvar, '/settings/prepare/')


#   print(">>>>>", gvar['active_group'], gvar['super_user'])
#   gvar['super_user'] = False

    # Call object handler.
    if gvar['object'] in gvar['actions']:
        if not gvar['super_user'] and gvar['actions'][gvar['object']][0]:
            print('Error: You are not authorized to access object "%s"; use "%s -h" or "%s -H" for help.' % (gvar['object'], gvar['command_name'], gvar['command_name']))
            exit(1)

        if gvar['action'] in gvar['actions'][gvar['object']][1]:
            gvar['actions'][gvar['object']][1][gvar['action']](gvar)
        else:
            csv2_help.help(gvar)
            if not gvar['action']:
                print('Error: No action specified for object "%s"; use -h or -H for help.' % gvar['object'])
            else:
                print('Error: Invalid action "%s" for object "%s"; use -h or -H for help.' % (gvar['action'], gvar['object']))
            exit(1)
    else:
        csv2_help.help(gvar)
        if not gvar['object']:
            print('Error: No object specified; use -h or -H for help.')
        else:
            print('Error: Invalid object "%s" specified; use -h or -H for help.' % gvar['object'])
        exit(1)
             
def _args(gvar, arg_list):
    """
    Return dictionary of arguments.
    """

    # Initialize response.
    response = {}
    unrecognized = []

    for _ix in range(len(gvar['command_keys'])):
        if not gvar['command_keys'][_ix][2]:
            response[gvar['command_keys'][_ix][1][2:]] = False

    # Scan args.
    _max_ix = len(arg_list) - 1
    _skip_next = False
    for _ix in range(len(arg_list)):
        if _skip_next:
            _skip_next = False

        else:
            _recognized = False
            for _iy in range(len(gvar['command_keys'])):
                _key_mnemonic = '%s|%s' % (gvar['command_keys'][_iy][0], gvar['command_keys'][_iy][1])
                if gvar['command_keys'][_iy][2] and \
                _ix < _max_ix and \
                (arg_list[_ix] == gvar['command_keys'][_iy][0] or \
                arg_list[_ix] == gvar['command_keys'][_iy][1]):
                    _recognized = True
                    _skip_next = True
                    response[gvar['command_keys'][_iy][1][2:]] = arg_list[_ix+1]

                elif not gvar['command_keys'][_iy][2] and \
                (arg_list[_ix] == gvar['command_keys'][_iy][0] or \
                arg_list[_ix] == gvar['command_keys'][_iy][1]):
                    _recognized = True
                    response[gvar['command_keys'][_iy][1][2:]] = True

        if not _recognized:
            if not gvar['object']:
                gvar['object'] = arg_list[_ix]
            elif not gvar['action']:
                gvar['action'] = arg_list[_ix]
            else:
                unrecognized.append(arg_list[_ix])

    if unrecognized:
        print('Error: The following command line arguments were unrecognized: %s' % unrecognized)
        exit(1)

    return response 

if __name__ == "__main__":
    main(sys.argv)

