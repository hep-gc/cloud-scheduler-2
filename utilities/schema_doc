#!/usr/bin/env python3
"""
Synopsis: utilities/generate_schema.py > lib/schema.py

This routine pulls the current table definitions from the csv2 database and writes the
schema to stdout. To use the schema definitions:

            from lib.schema import <view_or_table_name_1>, <view_or_table_name_2>, ...
"""

from copy import deepcopy
from shutil import copyfile
from subprocess import Popen, PIPE
from tempfile import NamedTemporaryFile
import os
import sys
import yaml

REMOVE_BRACKETS = str.maketrans('()', '  ')

def create_index(gvar, type):
    def create_index_entries(gvar, type, fd, caption, table_category=None):
        if type == 'tables':
            fd.write('\n.. toctree::\n   :maxdepth: 1\n   :caption: %s\n\n' % caption)

        for table in sorted(gvar['schema'][type]):
            if type == 'tables' and table_category:
                if table in gvar['schema_backup_conf'][table_category]:
                    fd.write('   %s\n' % table)

            elif type == 'triggers' or type == 'views':
                fd.write('   %s\n' % table)
     
    template_path = '%s/docs/schema_doc/templates/%s.rst' % (gvar['base_dir'], type)
    with open(template_path) as fd:
        template = fd.read()

    index_path = '%s/docs/source/_architecture/_data_services/_database/_%s/index.rst' % (gvar['base_dir'], type)
    with open(gvar['tempfile'].name, 'w') as fd:
        fd.write(gvar['do_not_edit'] % ('templates/%s.rst' % type))
        fd.write(template)

        if type == 'tables':
            create_index_entries(gvar, type, fd, 'Global configuration tables:',           table_category='global')
            create_index_entries(gvar, type, fd, 'Local configuration tables:',            table_category='local')
            create_index_entries(gvar, type, fd, 'Ephemeral state data:',                  table_category='ephemeral')
            create_index_entries(gvar, type, fd, 'Tables used by other support services:', table_category='ignore')

        else:
            create_index_entries(gvar, type, fd, 'ALL')

    if not os.path.exists(index_path) or not equal_files(gvar, gvar['tempfile'].name, index_path):
        print("Updating:", index_path)
        copyfile(gvar['tempfile'].name, index_path)

def create_RSTs(gvar, type):
    def write_RSTs_synopsis(gvar, fd, indent, text):
        wpl = 12

        if text and len(str(text).strip())>0:
            try:
                ignore = text.index('\\')
                fd.write('%s\n' % text.replace('\n', '\n\n').replace('\\ ', '\n').replace(' \\', '\n'))
            
            except:
                paras = str(text).strip().split('\n')
                for para in paras:
                    words = para.split()
                    for ix in range(0, len(words), wpl):
                        fd.write('%s%s\n' % (' '*indent, ' '.join(words[ix:ix+wpl])))

                    fd.write('\n')

        else:
            fd.write('\n')

    for table in sorted(gvar['schema'][type]):
        if not gvar['schema'][type][table]:
            continue

        if type == 'tables' and table not in gvar['key_list'][type] and table not in gvar['column_list'][type]:
            continue

        rst_path = '%s/docs/source/_architecture/_data_services/_database/_%s/%s.rst' % (gvar['base_dir'], type, table)
        with open(gvar['tempfile'].name, 'w') as fd:
            fd.write(gvar['do_not_edit'] % '%s/%s.yaml' % (type, table))

            if type == 'tables':
                if gvar['schema_states']['%s/%s' % (type, table)] == 1:
                    fd.write('Database Table: %s (obsolete)\n%s\n\n' % (table, '='*(len(table)+16)))
                else:
                    fd.write('Database Table: %s\n%s\n\n' % (table, '='*(len(table)+16)))
            elif type == 'triggers':
                if gvar['schema_states']['%s/%s' % (type, table)] == 1:
                    fd.write('Database Trigger: %s (obsolete)\n%s\n\nCondition: %s\n\n' % (table, '='*(len(table)+18), gvar['schema'][type][table]['Condition']))
                else:
                    fd.write('Database Trigger: %s\n%s\n\nCondition: %s\n\n' % (table, '='*(len(table)+18), gvar['schema'][type][table]['Condition']))
            else:
                if gvar['schema_states']['%s/%s' % (type, table)] == 1:
                    fd.write('Database View: %s (obsolete)\n%s\n\n' % (table, '='*(len(table)+15)))
                else:
                    fd.write('Database View: %s\n%s\n\n' % (table, '='*(len(table)+15)))

            write_RSTs_synopsis(gvar, fd, 0, gvar['schema'][type][table]['Synopsis'])

            len_keys = len(gvar['schema'][type][table]['Keys'])
            if len_keys > 0:
                fd.write('\nKeys:\n^^^^^\n\n')

                if len_keys == len(gvar['key_list'][type][table]):
                    key_list = gvar['key_list'][type][table]
                else:
                    key_list = sorted(gvar['schema'][type][table]['Keys'])

                for key in key_list:
                    if gvar['schema_states']['%s/%s/Keys/%s' % (type, table, key)] == 1:
                        fd.write('* **%s** (%s, obsolete):\n\n' % (key, gvar['schema'][type][table]['Keys'][key]['Format']))
                    else:
                        fd.write('* **%s** (%s):\n\n' % (key, gvar['schema'][type][table]['Keys'][key]['Format']))

                    write_RSTs_synopsis(gvar, fd, 6, gvar['schema'][type][table]['Keys'][key]['Synopsis'])

            len_columns = len(gvar['schema'][type][table]['Columns'])
            if len_columns > 0:
                fd.write('\nColumns:\n^^^^^^^^\n\n')

                if len_columns == len(gvar['column_list'][type][table]):
                    column_list = gvar['column_list'][type][table]
                else:
                    column_list = sorted(gvar['schema'][type][table]['Columns'])

                for column in column_list:
                    if gvar['schema_states']['%s/%s/Columns/%s' % (type, table, column)] == 1:
                        fd.write('* **%s** (%s, obsolete):\n\n' % (column, gvar['schema'][type][table]['Columns'][column]['Format']))
                    else:
                        fd.write('* **%s** (%s):\n\n' % (column, gvar['schema'][type][table]['Columns'][column]['Format']))

                    write_RSTs_synopsis(gvar, fd, 6, gvar['schema'][type][table]['Columns'][column]['Synopsis'])

        if not os.path.exists(rst_path) or not equal_files(gvar, gvar['tempfile'].name, rst_path):
            print("Updating:", rst_path)
            copyfile(gvar['tempfile'].name, rst_path)

def equal_files(gvar, fn1, fn2):
    len_do_not_edit = len(gvar['do_not_edit'].split('\n'))

    with open(fn1) as fd:
        f1 = '\n'.join(fd.read().split('\n')[len_do_not_edit:])

    with open(fn2) as fd:
        f2 = '\n'.join(fd.read().split('\n')[len_do_not_edit:])

    return f1 == f2

def main(args):
    """
    This does everything:
    o Writes the schema header to stdout.
    o Retrieves the list of tables from the csv2 database.
    o Then for each table:
      - Resets the variable _stdout to just the table header.
      - Retrieves the column list for the table.
      - Then for each column:
        + Appends the column definition to _stdout.-
      - Appends the table footer to _stdout.
      - Writes the table definition to stdout.
    """

    gvar = {}
    config_path = '/etc/cloudscheduler/cloudscheduler.yaml'
    if os.path.isfile(config_path):
        fd = open(config_path)
        gvar['csv2_config'] = yaml.full_load(fd.read())
        fd.close()
    else:
        gvar['csv2_config'] = None
    

    gvar['cmd_path'] = os.path.abspath(args[0])
    gvar['cmd_path_stat'] = os.stat(gvar['cmd_path'])
    gvar['path_info'] = gvar['cmd_path'].split('/')
    gvar['ix'] = gvar['path_info'].index('cloudscheduler')
    gvar['base_dir'] = '/'.join(gvar['path_info'][:gvar['ix']+1])
    gvar['do_not_edit'] = '.. File generated by %s/utilities/schema_doc - DO NOT EDIT\n' \
        '..\n' \
        '.. To modify the contents of this file:\n' \
        '..   1. edit the template file ".../cloudscheduler/docs/schema_doc/%%s"\n' \
        '..   2. run the utility ".../cloudscheduler/utilities/schema_doc"\n' \
        '..\n\n' % (gvar['base_dir'])
    gvar['schema'] = {'common': {}, 'tables': {}, 'triggers': {}, 'views': {}}
    gvar['schema_states'] = {}
    gvar['tempfile'] = NamedTemporaryFile(delete=False)

    gvar['column_list'] = {'tables': {}, 'views': {}}
    gvar['key_list'] = {'tables': {}, 'views': {}}

    try:
        import sphinx
        gvar['sphinx'] = True
    except:
        gvar['sphinx'] = False

    schema_yaml_get(gvar, 'common')
    schema_yaml_get(gvar, 'tables')
    schema_yaml_get(gvar, 'triggers')
    schema_yaml_get(gvar, 'views')

    max_tries = 5
    while True:
        nested_refs = resolve_references(gvar, 'tables')
        nested_refs = resolve_references(gvar, 'triggers')
        nested_refs += resolve_references(gvar, 'views')

        max_tries -= 1
        if nested_refs < 1 or max_tries <1:
            break

    gvar['schema_copy'] = deepcopy(gvar['schema'])

    with open('%s/etc/schema_backup.conf' % gvar['base_dir']) as fd:
        gvar['schema_backup_conf'] = yaml.full_load(fd.read())
    
    if gvar['csv2_config']:
        _p1 = Popen(
            [
                'mysql',
                '-u%s' % gvar['csv2_config']['database']['db_user'],
                '-p%s' % gvar['csv2_config']['database']['db_password'],
                '-e',
                'show full tables;',
                gvar['csv2_config']['database']['db_name']
                ],
            stdout=PIPE,
            stderr=PIPE
            )
        _p2 = Popen(
            [
                'awk',
                '!/Tables_in_csv2/ {print $1 " " $2}'
                ],
            stdin=_p1.stdout,
            stdout=PIPE,
            stderr=PIPE
            )
        stdout, stderr = _p2.communicate()
        if _p2.returncode != 0:
            print('Failed to retrieve table list.')
            exit(1)

        lines = stdout.decode('ascii').split('\n')
        for line in lines[:-1]:
            table, base_or_view = line.split()
            if base_or_view == 'VIEW':
                type = 'views'
            else:
                type = 'tables'

            if table in gvar['schema'][type]:
                if gvar['schema'][type][table]:
                    gvar['schema_states']['%s/%s' % (type, table)] = 2
                else:
                    continue
            else:
                gvar['schema'][type][table] = {'Synopsis': '', 'Keys': {}, 'Columns': {}}
                gvar['schema_states']['%s/%s' % (type, table)] = 0
            
            gvar['column_list'][type][table] = []
            gvar['key_list'][type][table] = []

            _p1 = Popen(
                [
                    'mysql',
                    '-u%s' % gvar['csv2_config']['database']['db_user'],
                    '-p%s' % gvar['csv2_config']['database']['db_password'],
                    '-e',
                    'show columns from %s;' % table,
                    gvar['csv2_config']['database']['db_name']
                    ],
                stdout=PIPE,
                stderr=PIPE
                )
            _p2 = Popen(
                [
                    'awk',
                    '!/^+/'
                    ],
                stdin=_p1.stdout,
                stdout=PIPE,
                stderr=PIPE
                )
            stdout, stderr = _p2.communicate()
            if _p2.returncode != 0:
                print('Failed to retrieve table columns.')
                exit(1)

            columns = stdout.decode('ascii').split("\n")
            for _ix in range(1, len(columns)):
                _w = columns[_ix].split()
                if len(_w) > 3 and _w[3] == 'PRI':
                    gvar['key_list'][type][table].append(_w[0])

                    coltype = 'Keys'
                    if _w[0] in gvar['schema'][type][table]['Columns']:
                        gvar['schema'][type][table]['Keys'][_w[0]] = gvar['schema'][type][table]['Columns'][_w[0]]
                        del gvar['schema'][type][table]['Columns'][_w[0]]
                else:
                    if len(_w) > 0:
                        gvar['column_list'][type][table].append(_w[0])

                    coltype = 'Columns'
                    if len(_w) > 0 and _w[0] in gvar['schema'][type][table]['Keys']:
                        gvar['schema'][type][table]['Columns'][_w[0]] = gvar['schema'][type][table]['Keys'][_w[0]]
                        del gvar['schema'][type][table]['Keys'][_w[0]]

                if len(_w) > 2:
                    if _w[0] in gvar['schema'][type][table][coltype]:
                        gvar['schema_states']['%s/%s/%s/%s' % (type, table, coltype, _w[0])] = 2
                    else:
                        gvar['schema'][type][table][coltype][_w[0]] = {'Format': None, 'Synopsis': ''}
                        gvar['schema_states']['%s/%s/%s/%s' % (type, table, coltype, _w[0])] = 0


                    if _w[1][:5] == 'char(' or \
                        _w[1][:8] == 'varchar(':
                        _w2 = _w[1].translate(REMOVE_BRACKETS).split()
                        gvar['schema'][type][table][coltype][_w[0]]['Format'] = 'String(%s)' % _w2[1]

                    elif _w[1][:4] == 'int(' or \
                    _w[1][:6] == 'bigint' or \
                    _w[1][:4] == 'date' or \
                    _w[1][:8] == 'datetime' or \
                    _w[1][:7] == 'decimal' or \
                    _w[1][:8] == 'smallint' or \
                    _w[1][:9] == 'timestamp':
                        gvar['schema'][type][table][coltype][_w[0]]['Format'] = 'Integer'

                    elif _w[1][:7] == 'tinyint':
                        gvar['schema'][type][table][coltype][_w[0]]['Format'] = 'Boolean'

                    elif _w[1] == 'text' or \
                    _w[1] == 'tinytext' or \
                    _w[1] == 'longtext' or \
                    _w[1] == 'mediumtext':
                        gvar['schema'][type][table][coltype][_w[0]]['Format'] = 'String'

                    elif _w[1][:7] == 'double' or \
                    _w[1][:5] == 'float':
                        gvar['schema'][type][table][coltype][_w[0]]['Format'] = 'Float'

                    else:
                        print('Table %s, unknown data type for column: %s' % (table, columns[_ix]))
                        exit(1)

        _p1 = Popen(
            [
                'mysql',
                '-u%s' % gvar['csv2_config']['database']['db_user'],
                '-p%s' % gvar['csv2_config']['database']['db_password'],
                '-e',
                'show triggers;',
                '-t', 
                gvar['csv2_config']['database']['db_name']
                ],
            stdout=PIPE,
            stderr=PIPE
            )
        stdout, stderr = _p1.communicate()
        if _p1.returncode != 0:
            print('Failed to retrieve trigger list.')
            exit(1)

        lines = stdout.decode('ascii').split('\n')
        for line in lines[3:-1]:
            cols = line.split(' | ', 3)
            if len(cols) > 2:
                if cols[0][0] == '|':
                    trigger = cols[0][2:].strip()
                    event = cols[1].strip()
                    table = cols[2].strip()
                elif cols[0].strip() == 'end':
                    timing = cols[1].strip()
                    if event == 'INSERT':
                        lower_event = 'insert into'
                    elif event == 'UPDATE':
                        lower_event = 'update on'
                    elif event == 'DELETE':
                        lower_event = 'delete from'
                    else:
                        lower_event = '???'
                    
                    if trigger in gvar['schema']['triggers']:
                        gvar['schema_states']['triggers/%s' % trigger] = 2
                    else:
                        gvar['schema']['triggers'][trigger] = {'Synopsis': None}
                        gvar['schema_states']['triggers/%s' % trigger] = 0

                    gvar['schema']['triggers'][trigger]['Condition'] = '%s %s %s' % (timing.lower(), lower_event, table)

    if (len(sys.argv)>1 and sys.argv[1] == 'list') or \
        (len(sys.argv)>2 and sys.argv[1] == 'show') or \
        (len(sys.argv)>1 and sys.argv[1] == 'summary'):

        schema_summarize(gvar, 'tables')
        schema_summarize(gvar, 'triggers')
        schema_summarize(gvar, 'views')

    elif len(sys.argv)<2:
        schema_yaml_put(gvar, 'tables')
        schema_yaml_put(gvar, 'triggers')
        schema_yaml_put(gvar, 'views')

        create_index(gvar, 'tables')
        create_RSTs(gvar, 'tables')

        create_index(gvar, 'triggers')
        create_RSTs(gvar, 'triggers')

        create_index(gvar, 'views')
        create_RSTs(gvar, 'views')

        os.unlink(gvar['tempfile'].name)

        if not gvar['csv2_config']:
            print('WARNING: Documentation generated without access to the database; tables/fields may not be reflected accurately.')

        if gvar['sphinx']:
            p = Popen(['make', 'html'], cwd='%s/docs' % gvar['base_dir'])
            p.communicate()
        else:
            print('WARNING: "sphinx" is not installed on your system; unable to rebuild the HTML files.')

    else:
        print('Invalid options: %s\n\nSynopsis:\n   schema_doc\n   schema_doc list\n   schema_doc show <table_name>\n   schema_doc summary\n\n' % sys.argv[1:])

def schema_summarize(gvar, type):
    def schema_summarize_print(gvar, table, options, text):
        if sys.argv[1] in options:
            if sys.argv[1] != 'show' or (sys.argv[1] == 'show' and sys.argv[2] == table):
                print(text)

    def schema_summarize_print_label(gvar, type, table):
        if gvar['labels_printed'][0] == 0:
            gvar['labels_printed'][0] = 1
            schema_summarize_print(gvar, table, ['list', 'show'], '%s:' % table)

        if type == 'Keys' and gvar['labels_printed'][1] == 0:
            gvar['labels_printed'][1] = 1
            schema_summarize_print(gvar, table, ['show'], '    keys:')

        if type == 'Columns' and gvar['labels_printed'][2] == 0:
            gvar['labels_printed'][2] = 1
            schema_summarize_print(gvar, table, ['show'], '    Columns:')

    def schema_summarize_print_keys_columns(gvar, type, table, coltype):
        for col in  gvar['schema'][type][table][coltype]:
            gvar['counters'][coltype]['total'] += 1

            # New?
            if 'Synopsis' not in gvar['schema'][type][table][coltype][col] or \
                not isinstance(gvar['schema'][type][table][coltype][col]['Synopsis'], str):

#               not isinstance(gvar['schema'][type][table][coltype][col]['Synopsis'], str) or \
#               gvar['schema'][type][table][coltype][col]['Synopsis'].strip() == '':

                gvar['counters'][coltype]['new'] += 1
                schema_summarize_print_label(gvar, coltype, table)
                schema_summarize_print(gvar, table, ['show'], '        %s, new' % col)


            # Obsolete?
            if gvar['schema_states']['%s/%s/%s/%s' % (type, table, coltype, col)] == 1:
                gvar['counters'][coltype]['obsolete'] += 1
                schema_summarize_print_label(gvar, coltype, table)
                schema_summarize_print(gvar, table, ['show'], '        %s, obsolete' % col)
                

    gvar['counters'] = {
        type: {'total': 0, 'new': 0, 'obsolete': 0},
        'Keys': {'total': 0, 'new': 0, 'obsolete': 0},
        'Columns': {'total': 0, 'new': 0, 'obsolete': 0}
        }


    for table in  gvar['schema'][type]:
        gvar['labels_printed'] = [0, 0, 0]
        gvar['counters'][type]['total'] += 1

        # New?
        if 'Synopsis' not in gvar['schema'][type][table] or \
            not isinstance(gvar['schema'][type][table]['Synopsis'], str) or \
            gvar['schema'][type][table]['Synopsis'].strip() == '':

            gvar['counters'][type]['new'] += 1
            schema_summarize_print_label(gvar, type, table)


        # Obsolete?
        if gvar['schema_states']['%s/%s' % (type, table)] == 1:
            gvar['counters'][type]['obsolete'] += 1
            schema_summarize_print_label(gvar, type, table)
            
        if type != 'triggers':
            schema_summarize_print_keys_columns(gvar, type, table, 'Keys')
            schema_summarize_print_keys_columns(gvar, type, table, 'Columns')

    schema_summarize_print(gvar, None, ['summary'], '\nSummary:')
    schema_summarize_print(gvar, None, ['summary'], '    %-8s   -> total: %4d, new: %4d, obsolete: %4d' % (type, gvar['counters'][type]['total'], gvar['counters'][type]['new'], gvar['counters'][type]['obsolete']))

    if type != 'triggers':
        schema_summarize_print(gvar, None, ['summary'], '    keys       -> total: %4d, new: %4d, obsolete: %4d' % (gvar['counters']['Keys']['total'], gvar['counters']['Keys']['new'], gvar['counters']['Keys']['obsolete']))
        schema_summarize_print(gvar, None, ['summary'], '    Columns    -> total: %4d, new: %4d, obsolete: %4d\n' % (gvar['counters']['Columns']['total'], gvar['counters']['Columns']['new'], gvar['counters']['Columns']['obsolete']))

def schema_yaml_get(gvar, type):
    if gvar['csv2_config']:
        default_state = 1
    else:
        default_state = 2


    for table_file in os.listdir('%s/docs/schema_doc/%s' % (gvar['base_dir'], type)):
        table = table_file.split('.')[0]
        table_path = '%s/docs/schema_doc/%s/%s' % (gvar['base_dir'], type, table_file)
        if os.path.isfile(table_path):
#           print("Reading:", table_path)
            with open(table_path) as fd:
                try:
                    table_doc = yaml.full_load(fd.read())
                except Exception as ex:
                    print('ERROR: Skipping invalid yaml "%s": %s' % (table_path, ex))
                    gvar['schema'][type][table] = {}
                    continue

            gvar['schema'][type][table] = table_doc[table]
            gvar['schema_states']['%s/%s' % (type, table)] = default_state

            if 'Keys' in gvar['schema'][type][table] and gvar['schema'][type][table]['Keys']:
                for key in gvar['schema'][type][table]['Keys']:
                    gvar['schema_states']['%s/%s/%s/%s' % (type, table, 'Keys', key)] = default_state
            else:
                gvar['schema'][type][table]['Keys'] = {}

            if 'Columns' in gvar['schema'][type][table] and gvar['schema'][type][table]['Columns']:
                for column in gvar['schema'][type][table]['Columns']:
                    gvar['schema_states']['%s/%s/%s/%s' % (type, table, 'Columns', column)] = default_state
            else:
                gvar['schema'][type][table]['Columns'] = {}

def resolve_references(gvar, type):
    """
    Replace a reference with the text being referenced.

    Synopsis can contain contain reference strings in the following forms:
    
       - REF=(tables/<table_name>)
       - REF=(tables/<table_name>/Keys/<key_name>)
       - REF=(tables/<table_name>/Columns/<col_name>)
       - REF=(views/<view_name>)
       - REF=(views/<view_name>/Keys/<key_name>)
       - REF=(views/<view_name>/Columns/<col_name>)
    
    Each of these reference points to a synopsis location. Since synopsis can support 
    one or more paragraphs, each of these references can be qualified with:

       - /N

    Where N is the index of the paragraph that is being referenced (as opposed to 
    the whole synopsis), for example:

       - REF=(tables/<table_name>/Columns/<col_name>/N)

    """
    
    def deref(parent_dict, child_keys):
        if len(child_keys)>0:
            try:
                return deref(parent_dict[child_keys[0]], child_keys[1:])
            except:
                return None

        return parent_dict
    
    def resolve_references_in_synopsis(gvar, parent_keys):
        nested_refs = 0
        parent = deref(gvar['schema'], parent_keys)
        if 'Synopsis' in parent and parent['Synopsis']:
            refs = parent['Synopsis'].split('REF=(')
            if len(refs) > 1:
                for ix in range(1, len(refs)):
                    ref = refs[ix].split(')', 1)
                    if len(ref[0]) > 0:
                        key_list = ref[0].split('/')
                        if len(key_list) > 0 and (len(key_list)%2) != 0:
                            try:
                                pix = int(key_list[-1])
                            except:
                                print('ERROR: Invalid paragraph reference: %s -> %s' % ('/'.join(parent_keys), ref[0]))
                                return nested_refs
                        else:
                            pix = -1

                        if pix >= 0:
                            ref_target = deref(gvar['schema'], key_list[:-1])
                        else:
                            ref_target = deref(gvar['schema'], key_list)

                        if ref_target:
                            if 'Synopsis' in ref_target:
                                target_refs = ref_target['Synopsis'].split('REF=(')
                                if len(target_refs) > 1:
                                    refs[ix] = 'REF=(%s' % refs[ix]
                                    nested_refs += 1
                                    continue

                                if pix > -1:
                                    paras = ref_target['Synopsis'].split('\n')
                                    if pix < len(paras):
                                        refs[ix] = '%s%s' % (paras[pix], ref[1])
                                    else:
                                        print('ERROR: Invalid paragraph reference: %s -> %s' % ('/'.join(parent_keys), ref[0]))
                                        return nested_refs
                                else:
                                    if len(ref) > 1:
                                        refs[ix] = '%s%s' % (ref_target['Synopsis'], ref[1])
                                    else:
                                        refs[ix] = ref_target['Synopsis']
                            else:
                                print('ERROR: Invalid reference, no synopsis: %s -> %s' % ('/'.join(parent_keys), ref[0]))
                                return nested_refs
                        else:
                            print('ERROR: Invalid reference keys: %s -> %s' % ('/'.join(parent_keys), ref[0]))
                            return nested_refs
                    else:
                        print('ERROR: Invalid reference, zero length: %s -> %s' % ('/'.join(parent_keys), ref[0]))
                        return nested_refs

                parent['Synopsis'] = ''.join(refs)

        return nested_refs

    nested_refs = 0
    for table_view in gvar['schema'][type]:
        nested_refs += resolve_references_in_synopsis(gvar, [type, table_view])

        if 'Keys' in gvar['schema'][type][table_view]:
            for key in gvar['schema'][type][table_view]['Keys']:
                nested_refs += resolve_references_in_synopsis(gvar, [type, table_view, 'Keys', key])

        if 'Columns' in gvar['schema'][type][table_view]:
            for column in gvar['schema'][type][table_view]['Columns']:
                nested_refs += resolve_references_in_synopsis(gvar, [type, table_view, 'Columns', column])

    return nested_refs

def schema_yaml_put(gvar, type):
    def schema_yaml_put_synopsis(gvar, fd, indent, text):
        if text:
            yaml_list = yaml.dump(text).replace('...\n', '').split('\n')
            for line in yaml_list:
                fd.write('%s%s\n' % (' '*indent, line.strip()))

        else:
            fd.write('\n')

    for table in gvar['schema'][type]:
        if not gvar['schema'][type][table]:
            continue

        yaml_path = '%s/docs/schema_doc/%s/%s.yaml' % (gvar['base_dir'], type, table)
        if table not in gvar['schema_copy'][type] or \
            gvar['schema'][type][table] != gvar['schema_copy'][type][table]:

            print("Updating:", yaml_path)
            with open(yaml_path, 'w') as fd:
                fd.write('%s:\n    Synopsis:\n' % table)
                schema_yaml_put_synopsis(gvar, fd, 8, gvar['schema'][type][table]['Synopsis'])

                if type == 'triggers':
                    fd.write('    Condition:\n')
                    schema_yaml_put_synopsis(gvar, fd, 8, gvar['schema']['triggers'][table]['Condition'])

                else:
                    fd.write('    Keys:\n\n')

                    for key in gvar['schema'][type][table]['Keys']:
                        fd.write('        %s:\n            Format: %s\n            Synopsis:\n' % (key, gvar['schema'][type][table]['Keys'][key]['Format']))
                        schema_yaml_put_synopsis(gvar, fd, 16, gvar['schema'][type][table]['Keys'][key]['Synopsis'])

                    fd.write('    Columns:\n\n')

                    for column in gvar['schema'][type][table]['Columns']:
                        fd.write('        %s:\n            Format: %s\n            Synopsis:\n' % (column, gvar['schema'][type][table]['Columns'][column]['Format']))
                        schema_yaml_put_synopsis(gvar, fd, 16, gvar['schema'][type][table]['Columns'][column]['Synopsis'])

if __name__ == "__main__":
    main(sys.argv)
