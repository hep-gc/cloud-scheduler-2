#!/usr/bin/env python3
"""
Synopsis: utilities/watch_csv2 <action> [ <options> ]
"""

from cloudscheduler.lib.db_config import Config
from subprocess import Popen, PIPE
import datetime
import curses
import json
import os
import sys
import tempfile
import time
import traceback

def main(args):
    if len(args) < 2:
        if sys.stdout.isatty():
            gvar = initialize(args, 'terminal')
            real_time_watch(gvar)
        else:
            print('Error: no option specified and no terminal attached.')
            exit(1)

    else:
        if args[1] == '?' or args[1] == '-h' or args[1] == '--help' or args[1] == 'help':
            print('\nSynopsis: watch_csv2 [ <option> ]' \
                '\n\nWhere "<option>" is one of the following:' \
                '\n   --help       - (or: -h, help, & ?) to request these help messages.' \
                '\n   --append     - (or: -a, append) appends periodical reports to the system log file.' \
                '\n   --enumerate  - (or: -e, enumerate) reads the system log file, identifies data' \
                '\n                  elements by inserting table, row, and column identifiers, and' \
                '\n                  writing the report to stdout.' \
                '\n   --logrotate  - (or: -l, logrotate)  calls map for the just rotated log file (standard' \
                '\n                  log file name with the date appended, ie. watch_csv2.logging.yyyymmdd.' \
                '\n   --map <path> - (or: -m, map) reads the specified log file and creates a log file map.' \
                '\n   --replay     - (or: -r, replay) replays the system log file.' \
                '\n\nIf no option is specified and a tty is attached, the report is writtin to the terminal.' \
                '\n\nwatch_csv2 has the following configuration values within the csv2 database:' \
                '\n   category=watch_csv2, key=config_file - specifies the absolute path of the watch_csv2' \
                '\n                                          configuration file. This file specifies the' \
                '\n                                          commands and SQL select statements that are to' \
                '\n                                          be "watched". Each command/statement must be' \
                '\n                                          terminated by a semicolon (";").' \
                '\n   category=watch_csv2, key=log_file    - specifies the absolute path of the watch_csv2' \
                '\n                                          log file.' \
                '\n   category=watch_csv2, key=sleep_time  - specifies the number of seconds between periodic' \
                '\n                                          reports.')

            exit(0)

        if args[1] == '--append' or args[1] == '-a' or args[1] == 'append':
            gvar = initialize(args, 'syslog')
            log_append(gvar)

        elif args[1] == '--enumerate' or args[1] == '-e' or args[1] == 'enumerate':
            gvar = initialize(args, 'enumerate')
            log_enumerate(gvar)

        elif args[1] == '--logrotate' or args[1] == '-l' or args[1] == 'logrotate':
            gvar = initialize(args, 'logrotate')
            log_rotate(gvar)

        elif args[1] == '--map' or args[1] == '-m' or args[1] == 'map':
            gvar = initialize(args, 'map')
            log_map(gvar)

        elif args[1] == '--replay' or args[1] == '-r' or args[1] == 'replay':
            gvar = initialize(args, 'replay')
            log_replay(gvar)

        else:
            print('Error: parameter "%s" is unregognized.' % args[1])
            exit(1)

def beep():
    curses.flushinp()
    curses.beep()
    return False

def generate_log_file_map(gvar, log_file_name, extend=[]):
    watch_xref = {}
    for ix in range(len(gvar['watch'])):
        watch_xref[gvar['watch'][ix]['id']] = ix

    cmd = None
    frames = extend

    # Set master frame for each command within the frames.
    if len(frames) > 0:
        cmd_fix = [0]*len(gvar['watch'])
        for fix in range(len(frames)-1, -1, -1):
            for ix in range(len(frames[fix]['cmd'])):
                if ix < len(cmd_fix) and cmd_fix[ix] == 0 and fix == frames[fix]['cmd'][ix][1]:
                    gvar['watch'][ix]['fix'] = fix
                    cmd_fix[ix] = 1

#           if extend:
#               print(">>> %s %s %s %s %s" % (len(extend), fix, ix, cmd_fix, frames[fix]['cmd'][ix][1]))

            if cmd_fix == [1]*len(gvar['watch']):
                break

    with open('%s/%s' % (gvar['log_dir'], log_file_name)) as fd:
        if len(frames) > 0:
            offset = frames[-1]['fsize']
            fd.seek(offset)
        else:
            offset = 0

        for line in fd:
            words = line[:-1].split()
            if len(words) > 0 and words[0] in watch_xref:
                if watch_xref[words[0]] == 0:
                    frames.append({'cmd': []})

                if len(frames) > 0:
                    cmd = gvar['watch'][watch_xref[words[0]]]
                    if 'fix' not in cmd:
                        cmd['fix'] = -1
                    
                    if len(words) > 1 and words[1][0] == '(':
                        cmd['fix'] = len(frames)-1

                    frames[-1]['cmd'].append([offset, cmd['fix']])

            elif 'condor_q' in watch_xref:
                if 'dd' not in frames[-1]:
                    date = words[-2].split('/')
                    time = words[-1].split(':')
                    frames[-1]['dd'] = (((int(date[2])*100)+int(date[0]))*100)+int(date[1])
                    frames[-1]['hr'] = time[0]*1

            offset += len(line)

    if 'dd' in frames[-1]:
        frames[-1]['fsize'] = offset
    else:
        if len(frames) > 1:
            frames[-2]['fsize'] = frames[-1]['cmd'][0]
        del frames[-1]

    with open('%s/%s%s' % (gvar['log_dir'], log_file_name, gvar['log_file_map_sfx']), 'w') as fd:
        fd.write(json.dumps(frames))

    return frames

def get_real_time_data(gvar):
    query_words = []
    report = []
    for cmd in gvar['watch']:
        if cmd['type'] == 'CMD':
            p = Popen(cmd['command'], stdout=PIPE, stderr=PIPE)

        elif cmd['type'] == 'SQL':
            p = Popen([
                'mysql',
                '-u',
                gvar['db_config'].db_config['db_user'],
                '-p%s' % gvar['db_config'].db_config['db_password'],
                '-h%s' % gvar['db_config'].db_config['db_host'],
                gvar['db_config'].db_config['db_name'],
                '-t',
                '-e',
                '%s;' % cmd['command']
                ],
                stdout=PIPE, stderr=PIPE)

        stdout, stderr = p.communicate()
        if p.returncode == 0:
            diff = '*'.join(stdout.decode('utf-8').replace('\n', ' ').split())
            if cmd['diff'] != diff:
                cmd['change'] = True
                cmd['diff'] = diff
                cmd['report'] = ['']

                lines = stdout.decode('utf-8').split('\n')
                for line in lines:
                    if len(line) > 0:
                        cmd['report'].append(line)

                if len(cmd['report']) > 1:
                    if cmd['type'] == 'SQL':
                        cmd['report'][0] = '%s (%d):' % (cmd['id'], len(cmd['report'])-5)
                    else:
                        cmd['report'][0] = '%s (%d):' % (cmd['id'], len(cmd['report'])-1)
                else:
                    cmd['report'][0] = '%s (0):' % cmd['id']
            else:
                cmd['change'] = False
        else:
            if 'report' in cmd:
                cmd['report'].append('%s:' % cmd['id'])
                cmd['report'].append('Error: watch list, item=%s, id=%s, error=%s' % (cmd['ix'], cmd['id'], stderr))
            else:
                cmd['report'] = ['%s:' % cmd['id'], 'Error: watch list, item=%s, id=%s, error=%s' % (cmd['ix'], cmd['id'], stderr)]

def initialize(args, action):
    gvar = {
        'action': action,
        'args': args,
        'db_config': Config('/etc/cloudscheduler/cloudscheduler.yaml', ['signal_monitor', 'watch_csv2'], db_config_dict=True),
        'left_right': 0,
        'log_file_map_sfx': '.map',
        'watch': [],
        'up_down': 0,
        }

    gvar['log_dir'] = os.path.dirname(gvar['db_config'].categories['watch_csv2']['log_file'])
    gvar['log_file_pfx'] = os.path.basename(gvar['db_config'].categories['watch_csv2']['log_file'])

    if not os.path.isfile(gvar['db_config'].categories['watch_csv2']['config_file']):
        print('Error: Configuration file "%s" does not exist.' % gvar['db_config'].categories['watch_csv2']['config_file'])
        exit(1)

    fd = open(gvar['db_config'].categories['watch_csv2']['config_file'])
    watch_list = fd.read().replace('\n', ' ').split(';')
    fd.close()

    for ix in range(len(watch_list)):
        watch_words = watch_list[ix].split()
        if len(watch_words) > 0 and watch_words[0][0] != '#':
            if watch_words[0] == 'select':
                from_ix = -1 
                while True:
                    try:
                        from_ix = watch_words.index('from', from_ix+1)
                    except ValueError:
                        break

                gvar['watch'].append({
                    'id': watch_words[from_ix+1],
                    'ix': ix,
                    'type': 'SQL',
                    'command': watch_list[ix],
                    'diff': '********'
                    })

            else:
                gvar['watch'].append({
                    'id': watch_words[0],
                    'ix': ix,
                    'type': 'CMD',
                    'command': watch_words,
                    'diff': '********'
                    })
           
    return gvar

def log_append(gvar):
    while True:
        gvar['db_config'].refresh()
        gvar['db_config'].update_service_catalog()

        get_real_time_data(gvar)

        fd = open(gvar['db_config'].categories['watch_csv2']['log_file'], 'a')

        for cmd in gvar['watch']:
            if 'change' not in cmd or cmd['change']:
                fd.write('%s\n' % '\n'.join(cmd['report']))
            else:
                fd.write('%s no change.\n' % cmd['id'])

        fd.close()

        time.sleep(gvar['db_config'].categories['watch_csv2']['sleep_time'])
            
def log_enumerate(gvar):
    watch_xref = {}
    for ix in range(len(gvar['watch'])):
        watch_xref[gvar['watch'][ix]['id']] = ix

    fd = open(gvar['db_config'].categories['watch_csv2']['log_file'])
    lines = fd.read().split('\n')
    fd.close()

    cmd = None
    for line in lines:
        words = line.split()
        if len(words) > 0 and words[0] in watch_xref:
            cmd_ix = watch_xref[words[0]]
            row_ix = 0
        

        if gvar['watch'][cmd_ix]['type'] == 'CMD':
            print('%d_%d %s' % (cmd_ix, row_ix, line))
            row_ix += 1
        
        elif gvar['watch'][cmd_ix]['type'] == 'SQL' and len(words) > 0 and len(words[0]) > 0 and words[0][0] != '+':
            if row_ix == 0:
                print('%d_%d %s' % (cmd_ix, row_ix, line))
            else:
                cols = line[1:-1].split('|')
                for col_ix in range(1, len(cols)):
                    cols[col_ix] = '%d_%d=%s' % (cmd_ix, col_ix, cols[col_ix].strip())
                print('%d_%d %s' % (cmd_ix, row_ix, ', '.join(cols[1:])))
            row_ix += 1

def log_map(gvar):
    if len(gvar['args']) < 3:
        print('Error: specify the log file path to be mapped.')
        exit(1)

    log_file_path = os.path.realpath(gvar['args'][2])
    if not os.path.isfile(log_file_path):
        print('Error: the specified log file "%s" does not exist.' % log_file_path)
        exit(1)

    print('Mapping log file "%s".' % log_file_path)

    ignore = generate_log_file_map(gvar, os.path.basename(log_file_path))
#   print('sleeping 60 ...')
#   time.sleep(60)
#   ignore = generate_log_file_map(gvar, os.path.basename(log_file_path), extend=ignore)

def log_replay(gvar):
    def frame_bwd(gvar):
        gvar['left_right'] = 0
        gvar['up_down'] = 0

        if gvar['fix'] > 0:
            gvar['fix'] -= 1
            return True
        else:
            if os.stat('%s/%s' % (gvar['log_dir'], gvar['maps'][-1]['fn'])).st_size < gvar['maps'][-1]['map'][-1]['fsize']:
                maps_remap(gvar)

            if gvar['mix'] > 0:
                gvar['mix'] -= 1
                if not gvar['maps'][gvar['mix']]['map']:
                    maps_load(gvar)
                gvar['fix'] = len(gvar['maps'][gvar['mix']]['map']) - 1
                return True

            else:
                return beep()

    def frame_fwd(gvar, try_again=True):
        gvar['left_right'] = 0
        gvar['up_down'] = 0

        if gvar['fix'] < len(gvar['maps'][gvar['mix']]['map']) - 1:
            gvar['fix'] += 1
            return True
        else:
            if os.stat('%s/%s' % (gvar['log_dir'], gvar['maps'][-1]['fn'])).st_size < gvar['maps'][-1]['map'][-1]['fsize']:
                maps_remap(gvar)

            if gvar['mix'] < len(gvar['maps']) -1:
                gvar['mix'] += 1
                if not gvar['maps'][gvar['mix']]['map']:
                    maps_load(gvar)
                gvar['fix'] = 0
                return True

            else:
                if try_again:
                    maps_extend(gvar)
                    return frame_fwd(gvar, try_again=False)
                else:
                    return beep()

    def frame_get(gvar):
        fix = gvar['fix']
        mix = gvar['mix']

        report = []
        with open('%s/%s' % (gvar['log_dir'], gvar['maps'][gvar['mix']]['fn'])) as fd:
            for ix in range(len(gvar['maps'][mix]['map'][fix]['cmd'])):
                if gvar['maps'][mix]['map'][fix]['cmd'][ix][1] == -1 or gvar['maps'][mix]['map'][fix]['cmd'][ix][1] == fix:
                    mfix = fix
                else:
                    mfix = gvar['maps'][mix]['map'][fix]['cmd'][ix][1]

                if ix < len(gvar['maps'][mix]['map'][mfix]['cmd']) - 1:
                    rl = gvar['maps'][mix]['map'][mfix]['cmd'][ix+1][0] - gvar['maps'][mix]['map'][mfix]['cmd'][ix][0]
                else:
                    if mfix < len(gvar['maps'][mix]['map']) - 1:
                        rl = gvar['maps'][mix]['map'][mfix+1]['cmd'][0][0] - gvar['maps'][mix]['map'][mfix]['cmd'][ix][0]
                    else:
                        rl = gvar['maps'][mix]['map'][mfix]['fsize'] - gvar['maps'][mix]['map'][mfix]['cmd'][ix][0]

                fd.seek(gvar['maps'][mix]['map'][mfix]['cmd'][ix][0])
                lines = fd.read(rl).split('\n')
                if len(gvar['search_string'])>0 and len(lines)>6 and lines[1][0] == '+' and ''.join(lines).find(gvar['search_string'])>-1:
                    lines[0] = '%s *** Abbreviated ***' % lines[0]
                    for ix in range(4):
                        report.append(lines[ix])

                    for ix in range(4, len(lines)):
                        if lines[ix].find(gvar['search_string'])>-1:
                            report.append(lines[ix])

                    report.append(lines[-2])
                    report.append(lines[-1])
                    
                else:
                    for ix in range(len(lines)):
                        report.append(lines[ix])

        return report

    def maps_extend(gvar):
        gvar['maps'][gvar['mix']]['map'] = generate_log_file_map(gvar, gvar['maps'][gvar['mix']]['fn'], extend=gvar['maps'][gvar['mix']]['map'])

    def maps_load(gvar):
        if not os.path.isfile('%s/%s%s' % (gvar['log_dir'], gvar['maps'][gvar['mix']]['fn'], gvar['log_file_map_sfx'])):
            gvar['maps'][gvar['mix']]['map'] = generate_log_file_map(gvar, gvar['maps'][gvar['mix']]['fn'])
        else:
            with open('%s/%s%s' % (gvar['log_dir'], gvar['maps'][gvar['mix']]['fn'], gvar['log_file_map_sfx'])) as fd:
                gvar['maps'][gvar['mix']]['map'] = json.loads(fd.read())


    def maps_map(gvar):
        log_files = {}
        for log_file in os.listdir(gvar['log_dir']):
            if not os.path.isfile('%s/%s' % (gvar['log_dir'], log_file)) or \
                len(log_file) < len(gvar['log_file_pfx']):
                continue

            if log_file[:len(gvar['log_file_pfx'])] == gvar['log_file_pfx']:
                if log_file[-len(gvar['log_file_map_sfx']):] == gvar['log_file_map_sfx']:
                    log_fn = log_file[:-len(gvar['log_file_map_sfx'])]
                else:
                    log_fn = log_file

                if log_fn == gvar['log_file_pfx']:
                    log = 'z'
                else:
                    log = log_fn

                if log not in log_files:
                    log_files[log] = {'fn': log_fn, 'mapped': False, 'sourced': False}

                if log_fn == log_file:
                    log_files[log]['sourced'] = True
                else:
                    log_files[log]['mapped'] = True

        maps = []
        for log in  sorted(log_files):
            if log_files[log]['sourced']:
                maps.append({'fn': log_files[log]['fn'], 'map': None})

        del log_files
        return maps

    def maps_remap(gvar):
        # log files have been rotated, reload the maps and re-align mix/fix.
        return

    def search_bwd(gvar):
        fix = gvar['fix']
        mix = gvar['mix']
        
        while frame_bwd(gvar):
            if ''.join(frame_get(gvar)).find(gvar['search_string']) > -1:
                return True
            show_menu(gvar)
            
        gvar['fix'] = fix
        gvar['mix'] = mix
        return  beep()

    def search_fwd(gvar):
        fix = gvar['fix']
        mix = gvar['mix']
        
        while frame_fwd(gvar):
            if ''.join(frame_get(gvar)).find(gvar['search_string']) > -1:
                return True
            show_menu(gvar)
            
        gvar['fix'] = fix
        gvar['mix'] = mix
        return  beep()

    def show_menu(gvar):
        if gvar['search_string'] == '':
            stdscr.addnstr(gvar['yx'][0]-1, 0, 'REPLAY Map: %s/%s (%s), Frame: %s/%s, Commands: D<day>d  H<hour>h  N<next>n  \u2190\u2191\u2193\u2192Scroll  /-search_string  q-quit' % (gvar['mix']+1, len(gvar['maps']), gvar['maps'][gvar['mix']]['fn'], gvar['fix']+1, len(gvar['maps'][gvar['mix']]['map'])), gvar['yx'][1], curses.A_BOLD)
        else:
            stdscr.addnstr(gvar['yx'][0]-1, 0, 'REPLAY Map: %s/%s (%s), Frame: %s/%s, Commands: D<day>d  H<hour>h  N<next>n  \u2190\u2191\u2193\u2192Scroll  S<%s>s  q-quit' % (gvar['mix']+1, len(gvar['maps']), gvar['maps'][gvar['mix']]['fn'], gvar['fix']+1, len(gvar['maps'][gvar['mix']]['map']), gvar['search_string']), gvar['yx'][1], curses.A_BOLD)
        stdscr.refresh()

    gvar['maps'] = maps_map(gvar)
    gvar['mix'] = -1
    maps_load(gvar)

    gvar['fix'] = 0
    gvar['mix'] = len(gvar['maps']) - 1
    gvar['search_string'] = ''

    stdscr = curses.initscr(); curses.noecho(); curses.cbreak(); stdscr.keypad(1); curses.curs_set(0)
    gvar['yx'] = stdscr.getmaxyx()

    try:
        while (True):
            gvar['yx'] = stdscr.getmaxyx(); # stdscr.nodelay(1)

            frame_data = frame_get(gvar)

            stdscr.clear()
            for ix in range(min(len(frame_data), gvar['yx'][0]-2)):
                stdscr.addnstr(ix, 0, frame_data[ix+gvar['up_down']][gvar['left_right']:], gvar['yx'][1])

            show_menu(gvar)

            curses.cbreak()
            input = stdscr.getch()

            if input == ord('d'):
                cd = gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd']
                while frame_fwd(gvar) and gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd'] == cd:
                    pass

            elif input == ord('D'):
                cd = gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd']
                while frame_bwd(gvar) and gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd'] == cd:
                    pass

            elif input == ord('h'):
                cd = gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd']
                ch = gvar['maps'][gvar['mix']]['map'][gvar['fix']]['hr']
                while frame_fwd(gvar) and gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd'] == cd and gvar['maps'][gvar['mix']]['map'][gvar['fix']]['hr'] == ch:
                    pass

            elif input == ord('H'):
                cd = gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd']
                ch = gvar['maps'][gvar['mix']]['map'][gvar['fix']]['hr']
                while frame_bwd(gvar) and gvar['maps'][gvar['mix']]['map'][gvar['fix']]['dd'] == cd and gvar['maps'][gvar['mix']]['map'][gvar['fix']]['hr'] == ch:
                    pass

            elif input == ord('n'):
                frame_fwd(gvar)

            elif input == ord('N'):
                frame_bwd(gvar)

            # Down arror.
            elif input == 258:
                if gvar['up_down']<len(frame_data)-gvar['yx'][0]+1:
                    gvar['up_down'] += 1
                else:
                    beep()

            # Up arror.
            elif input == 259:
                if gvar['up_down']>0:
                    gvar['up_down'] -= 1
                else:
                    beep()

            # Left arror.
            elif input == 260:
                if gvar['left_right']>0:
                    gvar['left_right'] -= 1
                else:
                    beep()

            # Right arror.
            elif input == 261:
                gvar['left_right'] += 1

            elif input == ord('q'):
                break

            elif input == ord('/'):
                gvar['search_string'] = string_input(gvar, stdscr, 'Search string: ', 64)
                if len(gvar['search_string'])>0:
                    search_fwd(gvar)

            elif input == ord('s'):
                search_fwd(gvar)

            elif input == ord('S'):
                search_bwd(gvar)

        curses.curs_set(1); curses.nocbreak(); stdscr.keypad(0); curses.echo(); curses.endwin()
    except Exception as ex:
        curses.curs_set(1); curses.nocbreak(); stdscr.keypad(0); curses.echo(); curses.endwin()
#       print('Map: %s/%s, Frame: %s/%s, Log File: %s' % (gvar['mix']+1, len(gvar['maps']), gvar['fix']+1, len(gvar['maps'][gvar['mix']]['map']), gvar['maps'][gvar['mix']]['fn']))
        traceback.print_tb(ex)
            
def log_rotate(gvar):
    ts_sfx = datetime.datetime.now().strftime('-%Y%m%d-%H%M%S')

    p = Popen(['sudo', 'systemctl', 'stop', 'csv2-watch'], stdout=PIPE, stderr=PIPE)
    stdout, sdterr = p.communicate()
    if p.returncode != 0:
        print('Error: failed to stop csv2-watch during log rotation.')
        exit(1)

    os.rename('%s/%s' % (gvar['log_dir'], gvar['log_file_pfx']), '%s/%s%s' % (gvar['log_dir'], gvar['log_file_pfx'], ts_sfx))

    p = Popen(['sudo', 'systemctl', 'start', 'csv2-watch'], stdout=PIPE, stderr=PIPE)
    stdout, sdterr = p.communicate()
    if p.returncode != 0:
        print('Error: failed to start csv2-watch during log rotation.')
        exit(1)

    p = Popen([os.path.realpath(gvar['args'][0]), '--map', '%s/%s%s' % (gvar['log_dir'], gvar['log_file_pfx'], ts_sfx)], stdout=PIPE, stderr=PIPE)
    stdout, sdterr = p.communicate()
    if p.returncode != 0:
        print('Error: failed to map "%s" during log rotation.' % '%s/%s%s' % (gvar['log_dir'], gvar['log_file_pfx'], ts_sfx))

    p = Popen([os.path.realpath(gvar['args'][0]), '--map', '%s/%s' % (gvar['log_dir'], gvar['log_file_pfx'])], stdout=PIPE, stderr=PIPE)
    stdout, sdterr = p.communicate()
    if p.returncode != 0:
        print('Error: failed to map "%s" during log rotation.' % '%s/%s' % (gvar['log_dir'], gvar['log_file_pfx']))

    obsolete = []
    for fn in sorted(os.listdir(gvar['log_dir']), reverse=True):
        if fn != gvar['log_file_pfx'] and \
            fn[:len(gvar['log_file_pfx'])] == gvar['log_file_pfx'] and \
            fn[-len(gvar['log_file_map_sfx']):] != gvar['log_file_map_sfx']:
            obsolete.append(fn)

    for fn in obsolete[gvar['db_config'].categories['watch_csv2']['log_file_retain']:]:
        os.remove('%s/%s' % (gvar['log_dir'], fn))
        os.remove('%s/%s%s' % (gvar['log_dir'], fn, gvar['log_file_map_sfx']))
  
def string_input(gvar, stdscr, prompt, strlen):
    y1 = int((gvar['yx'][0]-7)/2)
    xl = 8+len(prompt)+strlen; 
    x1 = int((gvar['yx'][1]-xl)/2)

    topbot = '-'*(xl-2)
    blnkbg = ' '*(xl-2)

    curses.echo() 
    stdscr.addstr(y1+0, x1, ' '*xl)
    stdscr.addstr(y1+1, x1, ' +%s+ ' % topbot, curses.A_BOLD)
    stdscr.addstr(y1+2, x1, ' |%s| ' % blnkbg, curses.A_BOLD)
    stdscr.addstr(y1+3, x1, ' |%s| ' % blnkbg, curses.A_BOLD)
    stdscr.addstr(y1+4, x1, ' |%s| ' % blnkbg, curses.A_BOLD)
    stdscr.addstr(y1+5, x1, ' +%s+ ' % topbot, curses.A_BOLD)
    stdscr.addstr(y1+6, x1, ' '*xl)

    stdscr.addstr(y1+3, x1+3, prompt, curses.A_BOLD)
    stdscr.refresh()
    input = stdscr.getstr(y1+3, x1+3+len(prompt), strlen)
    curses.noecho() 
    return input.decode('utf-8')

def real_time_watch(gvar):
    def get_real_time_data_report(gvar):
        report = []
        get_real_time_data(gvar)
        for cmd in gvar['watch']:
            for line in cmd['report']:
                report.append(line)
            report.append('')
        return report

    frame_data = get_real_time_data_report(gvar)
    stdscr = curses.initscr(); curses.noecho(); curses.cbreak(); stdscr.keypad(1); curses.curs_set(0); stdscr.timeout(1000)
    gvar['yx'] = stdscr.getmaxyx()

    try:
        while (True):
            gvar['yx'] = stdscr.getmaxyx()

            stdscr.clear()
            if gvar['up_down'] > len(frame_data) - gvar['yx'][0] + 1:
                gvar['up_down'] = max(0, len(frame_data) - gvar['yx'][0] + 1)

            for ix in range(min(len(frame_data), gvar['yx'][0]-2)):
                stdscr.addnstr(ix, 0, frame_data[ix+gvar['up_down']][gvar['left_right']:], gvar['yx'][1])

            sleep_time = gvar['db_config'].categories['watch_csv2']['sleep_time']
            while True:
                stdscr.addnstr(gvar['yx'][0]-1, 0, 'Watching (%s)  \u2190\u2191\u2193\u2192Scroll  q-quit' % sleep_time, gvar['yx'][1], curses.A_BOLD)
                stdscr.clrtoeol()
                stdscr.refresh()
                curses.cbreak()
                input = stdscr.getch()
                if input != -1 or sleep_time < 2:
                    break

                sleep_time -= 1

            # Down arror.
            if input == 258:
                if gvar['up_down']<len(frame_data)-gvar['yx'][0]+1:
                    gvar['up_down'] += 1
                else:
                    beep()
                continue

            # Up arror.
            elif input == 259:
                if gvar['up_down']>0:
                    gvar['up_down'] -= 1
                else:
                    beep()
                continue

            # Left arror.
            elif input == 260:
                if gvar['left_right']>0:
                    gvar['left_right'] -= 1
                else:
                    beep()
                continue

            # Right arror.
            elif input == 261:
                gvar['left_right'] += 1
                continue

            elif input == ord('q'):
                break

            frame_data = get_real_time_data_report(gvar)

        curses.curs_set(1); curses.nocbreak(); stdscr.keypad(0); curses.echo(); curses.endwin()
    except Exception as ex:
        curses.curs_set(1); curses.nocbreak(); stdscr.keypad(0); curses.echo(); curses.endwin()
        traceback.print_tb(ex)
            
if __name__ == "__main__":
    main(sys.argv)
